<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Retro Events</title>
    <link rel="stylesheet" href="/stylesheets/main.css">
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&family=Inter:wght@400;500;700;800&display=swap" rel="stylesheet">

    <style>
        /*
        * All the retro theme variables from :root should ideally be in main.css
        * For demonstration, keeping them here if not already global.
        */
        :root {
            --retro-bg: wheat;
            --retro-text: #1F2937;
            --retro-accent-red: #d1451e;
            --retro-accent-yellow: #FFD93D;
            --retro-primary-teal: #2F9C95;
            --retro-secondary-light: #fff;
            --retro-shadow-dark: #000;
            --retro-shadow-light: rgba(0, 0, 0, 0.2);

            --font-primary: "Inter", sans-serif;
            --font-heading-retro: 'Press Start 2P', cursive;

            --transition-fast: 0.2s ease;
            --transition-medium: 0.3s ease;
            --transition-slow: 0.6s ease;
        }

        /* --- Retro Toggle Switch CSS (from your second code snippet) --- */
        .switch {
            --_switch-bg-clr: var(--retro-primary-teal);
            --_switch-padding: 4px;
            --_slider-bg-clr: var(--retro-accent-red);
            --_slider-bg-clr-on: var(--retro-accent-yellow);
            --_slider-txt-clr: var(--retro-text);
            --_label-padding: 0.75rem 1.5rem;
            --_switch-easing: cubic-bezier(0.47, 1.64, 0.41, 0.8);

            color: var(--retro-text);
            font-family: var(--font-heading-retro); /* Use retro font here */
            font-size: 0.8em;
            width: fit-content;
            display: flex;
            justify-content: center;
            position: relative;
            border-radius: 9999px;
            cursor: pointer;
            display: grid;
            grid-template-columns: repeat(2, minmax(0, 1fr));
            position: relative;
            isolation: isolate;

            border: 2px solid var(--retro-shadow-dark);
            box-shadow: 4px 4px 0 var(--retro-shadow-dark);
            transition: all 0.2s ease-out;
            z-index: 100; /* Ensure toggle is above other content */
        }

        .switch:hover {
            transform: translate(-2px, -2px);
            box-shadow: 6px 6px 0 var(--retro-shadow-dark);
        }

        .switch input[type="checkbox"] {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border-width: 0;
        }

        .switch > span {
            display: grid;
            place-content: center;
            transition: opacity 300ms ease-in-out 150ms;
            padding: var(--_label-padding);
            text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.2);
        }

        .switch::before,
        .switch::after {
            content: "";
            position: absolute;
            border-radius: inherit;
            transition: inset 150ms ease-in-out;
        }

        .switch::before {
            background-color: var(--_slider-bg-clr);
            inset: var(--_switch-padding) 50% var(--_switch-padding) var(--_switch-padding);
            transition:
                inset 500ms var(--_switch-easing),
                background-color 500ms ease-in-out;
            z-index: -1;
            box-shadow:
                inset 0 2px 4px rgba(0, 0, 0, 0.4),
                0 2px 0 rgba(255, 255, 255, 0.5);
            border: 2px solid var(--retro-shadow-dark);
        }

        .switch::after {
            background-color: var(--_switch-bg-clr);
            inset: 0;
            z-index: -2;
        }

        .switch:focus-within::after {
            inset: -0.35rem;
            box-shadow: 0 0 0 3px var(--retro-accent-yellow);
        }

        .switch:has(input:checked):hover > span:first-of-type,
        .switch:has(input:not(:checked)):hover > span:last-of-type {
            opacity: 1;
            transition-delay: 0ms;
            transition-duration: 100ms;
        }

        .switch:has(input:checked):hover::before {
            inset: var(--_switch-padding) var(--_switch-padding) var(--_switch-padding) 45%;
        }

        .switch:has(input:not(:checked)):hover::before {
            inset: var(--_switch-padding) 45% var(--_switch-padding) var(--_switch-padding);
        }

        .switch:has(input:checked)::before {
            background-color: var(--_slider-bg-clr-on);
            inset: var(--_switch-padding) var(--_switch-padding) var(--_switch-padding) 50%;
        }

        .switch > span:last-of-type,
        .switch > input:checked + span:first-of-type {
            opacity: 0.75;
        }
        .switch > input:checked ~ span:last-of-type {
            opacity: 1;
        }

        /* --- Positioning for the toggle switch on the page --- */
        .toggle-container {
            position: absolute;
            top: 20px; /* Adjust as needed */
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 10px;
            z-index: 100; /* Ensure it's above other content */
        }

        /* Adjust body to accommodate the fixed toggle if needed */
        body {
            position: relative; /* Needed for absolute positioning of toggle-container */
            padding-top: 80px; /* Make space for the fixed toggle at the top */
        }

        /* --- Responsive adjustments for the toggle (if needed) --- */
        @media (max-width: 768px) {
            .toggle-container {
                top: 10px;
                padding: 5px;
            }
            .switch {
                font-size: 0.7em; /* Smaller text on mobile */
                --_label-padding: 0.6rem 1.2rem; /* Smaller padding */
                box-shadow: 3px 3px 0 var(--retro-shadow-dark); /* Smaller shadow */
            }
            .switch:hover {
                transform: translate(-1px, -1px);
                box-shadow: 4px 4px 0 var(--retro-shadow-dark);
            }
            body {
                padding-top: 60px; /* Adjust body padding for smaller toggle */
            }
        }
        @media (max-width: 480px) {
             .switch {
                font-size: 0.65em;
                --_label-padding: 0.5rem 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="toggle-container">
        <label for="pageToggle" class="switch" aria-label="Toggle Page View">
            <input type="checkbox" id="pageToggle" />
            <span>Grid</span>
            <span>Aura</span>
        </label>
    </div>

    <main>
        <%- body %>
    </main>

    <script>
        const pageToggle = document.getElementById('pageToggle');

        // Function to set the toggle state based on current URL
        function setToggleState() {
            const currentPath = window.location.pathname;
            if (currentPath.includes('/aura')) {
                pageToggle.checked = true; // 'Aura' is selected
                pageToggle.querySelector('span:first-of-type').style.opacity = 0.75; // Manually dim 'Grid'
                pageToggle.querySelector('span:last-of-type').style.opacity = 1; // Highlight 'Aura'
            } else {
                pageToggle.checked = false; // 'Grid' is selected (default)
                pageToggle.querySelector('span:first-of-type').style.opacity = 1; // Highlight 'Grid'
                pageToggle.querySelector('span:last-of-type').style.opacity = 0.75; // Manually dim 'Aura'
            }
        }

        // Add event listener for when the toggle changes
        pageToggle.addEventListener('change', function() {
            if (this.checked) {
                // If checked, navigate to /aura
                window.location.href = '/aura';
            } else {
                // If unchecked, navigate to /grid
                window.location.href = '/grid';
            }
        });

        // Initialize toggle state when the page loads
        document.addEventListener('DOMContentLoaded', setToggleState);
    </script>
</body>
</html>