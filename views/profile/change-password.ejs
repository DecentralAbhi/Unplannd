<%- layout('layouts/boilerplate') %>

<style>
    /* Root CSS Variables for the Retro Theme (assuming these are defined elsewhere or inherited) */
    :root {
        --retro-bg: wheat; /* Main background from your box */
        --retro-text: #1F2937; /* Dark text for contrast */
        --retro-accent-red: #d1451e; /* From box shadow */
        --retro-accent-yellow: #FFD93D; /* From previous accent */
        --retro-primary-teal: #2F9C95; /* From your card background */
        --retro-secondary-light: #fff; /* From box shadow white */
        --retro-shadow-dark: #000; /* From box shadow black */
        --retro-shadow-light: rgba(0, 0, 0, 0.2); /* For softer elements */
        --font-heading-retro: "Press Start 2P", cursive; /* Define the retro font */
        --transition-fast: 0.2s ease; /* Define a fast transition variable */
    }

    /* Specific styles for the change password page to match the retro theme */

    .change-password-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: calc(100vh - var(--navbar-height, 80px) - var(--footer-height, 60px)); /* Adjust based on your navbar/footer height */
        padding: 20px;
        box-sizing: border-box;
        background-color: var(--retro-bg); /* Use the retro background */
        overflow: hidden; /* Hide any overflow from patterns */
        position: relative;
    }

    /* Global pixel background pattern for the whole page */
    .change-password-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image:
            linear-gradient(0deg, transparent 9px, rgba(0, 0, 0, 0.08) 10px),
            linear-gradient(90deg, transparent 9px, rgba(0, 0, 0, 0.08) 10px);
        background-size: 10px 10px;
        opacity: 0.5; /* More visible pixel grid */
        z-index: 0;
        pointer-events: none; /* Allow clicks to pass through */
    }

    .change-password-card {
        background-color: var(--retro-primary-teal); /* Teal background for the card */
        border: 6px solid var(--retro-shadow-dark); /* THICKER, stronger dark border */
        border-radius: 20px; /* MORE ROUNDED CORNERS */
        box-shadow: 0.8em 0.8em 0 var(--retro-accent-red); /* LARGER, more prominent 3D shadow */
        padding: 3rem; /* More padding for a substantial feel */
        max-width: 500px; /* Slightly wider card for more inputs */
        width: 100%;
        text-align: center;
        position: relative;
        overflow: hidden;
        z-index: 1; /* Ensure card is above global pattern */
    }

    /* Scanline effect for the card */
    .change-password-card::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: repeating-linear-gradient(
            to bottom,
            transparent 0px,
            transparent 1px,
            rgba(0, 0, 0, 0.1) 2px,
            rgba(0, 0, 0, 0.2) 3px,
            transparent 4px,
            transparent 5px
        );
        pointer-events: none;
        opacity: 0.3; /* Subtle scanlines */
        z-index: 2; /* Above content, below text */
    }

    .change-password-content {
        position: relative;
        z-index: 3; /* Ensure content is above scanlines */
    }

    .change-password-card-title {
        font-family: var(--font-heading-retro); /* Retro font for title */
        color: var(--retro-accent-yellow); /* Yellow title */
        font-size: 2.8em; /* LARGER title */
        margin-bottom: 2rem;
        text-shadow: 4px 4px 0 var(--retro-shadow-dark); /* HEAVIER text shadow for pixel effect */
        letter-spacing: 2px; /* Add some letter spacing */
    }

    .form-label-retro {
        font-family: var(--font-heading-retro); /* Retro font for labels */
        color: var(--retro-secondary-light); /* White labels */
        font-size: 1em; /* Slightly larger labels */
        margin-bottom: 0.8rem;
        display: block;
        text-align: left;
        text-shadow: 2px 2px 0 rgba(0, 0, 0, 0.4); /* Stronger text shadow */
        letter-spacing: 1px;
        line-height: 1.2; /* Adjust line height for pixel font */
    }

    .form-control-retro {
        background-color: var(--retro-bg); /* Wheat background for input fields */
        border: 3px solid var(--retro-shadow-dark); /* THICKER dark border */
        border-radius: 12px; /* MORE ROUNDED INPUTS */
        padding: 1em 1.2em; /* More padding */
        color: var(--retro-text); /* Dark text color */
        font-family: var(--font-heading-retro); /* PRESS START 2P FOR INPUTS */
        font-size: 1.1em; /* Slightly larger input text */
        width: 100%;
        box-sizing: border-box;
        margin-bottom: 1.5rem;
        transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
        box-shadow: 0.3em 0.3em 0 var(--retro-shadow-dark); /* More pronounced 3D effect */
        letter-spacing: 0.5px; /* Add some letter spacing for readability */
    }

    .form-control-retro:focus {
        border-color: var(--retro-accent-yellow); /* Yellow border on focus */
        box-shadow: 0.3em 0.3em 0 var(--retro-accent-red); /* Red shadow on focus */
        outline: none;
    }

    .btn-retro-primary {
        background-color: var(--retro-accent-red); /* Red button */
        color: var(--retro-secondary-light); /* White text */
        font-family: var(--font-heading-retro); /* Retro font */
        font-size: 1.3em; /* LARGER button text */
        padding: 1em 2em; /* More padding */
        border: 4px solid var(--retro-shadow-dark); /* THICKER dark border */
        border-radius: 15px; /* MORE ROUNDED BUTTONS */
        box-shadow: 0.5em 0.5em 0 var(--retro-shadow-dark); /* STRONGER 3D shadow */
        cursor: pointer;
        transition: all var(--transition-fast);
        width: 100%;
        margin-top: 1.5rem;
        text-shadow: 2px 2px 0 rgba(0, 0, 0, 0.5); /* Text shadow for button */
        letter-spacing: 1px;
    }

    .btn-retro-primary:hover {
        background-color: var(--retro-accent-yellow); /* Yellow on hover */
        color: var(--retro-text); /* Dark text on hover */
        transform: translateY(-5px); /* More pronounced lift effect */
        box-shadow: 0.7em 0.7em 0 var(--retro-shadow-dark); /* Even larger shadow on hover */
    }

    .btn-retro-primary:active {
        transform: translateY(0); /* Press down effect */
        box-shadow: 0.2em 0.2em 0 var(--retro-shadow-dark); /* Smaller shadow when pressed */
    }

    .back-link-section {
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 4px dashed var(--retro-accent-yellow); /* THICKER dashed separator */
    }

    .back-link-section p {
        color: var(--retro-secondary-light); /* White text */
        font-family: var(--font-heading-retro); /* PRESS START 2P FOR PARAGRAPH */
        font-size: 0.9em; /* Adjusted size for readability with pixel font */
        margin-bottom: 1rem;
        text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.3);
        line-height: 1.4; /* Adjust line height for pixel font */
        letter-spacing: 0.5px;
    }

    .back-link-section a {
        color: var(--retro-accent-yellow); /* Yellow link */
        text-decoration: none;
        font-weight: bold;
        transition: color var(--transition-fast);
        font-family: var(--font-heading-retro); /* Retro font for link */
        font-size: 1.1em;
        text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.3);
        letter-spacing: 0.5px;
    }

    .back-link-section a:hover {
        color: var(--retro-accent-red); /* Red on hover */
        text-decoration: underline;
    }

    /* Basic validation feedback styling */
    .was-validated .form-control-retro:invalid {
        border-color: var(--retro-accent-red);
        box-shadow: 0.3em 0.3em 0 var(--retro-accent-red);
    }
    .was-validated .form-control-retro:valid {
        border-color: #28a745; /* Bootstrap green for valid */
    }
    .invalid-feedback-retro {
        color: var(--retro-accent-red);
        font-family: var(--font-heading-retro); /* PRESS START 2P FOR FEEDBACK */
        font-size: 0.8em; /* Adjusted size for readability */
        text-align: left;
        margin-top: 0.25rem;
        display: none; /* Hidden by default */
        line-height: 1.2;
        letter-spacing: 0.5px;
    }
    .was-validated .form-control-retro:invalid + .invalid-feedback-retro {
        display: block; /* Show on invalid */
    }
    /* Specific styling for password mismatch feedback */
    #newPassword2 + .invalid-feedback-retro.password-mismatch {
        display: block;
    }

    /* Responsive adjustments for smaller screens */
    @media (max-width: 576px) {
        .change-password-card {
            padding: 2rem;
            box-shadow: 0.6em 0.6em 0 var(--retro-accent-red); /* Slightly smaller shadow */
        }
        .change-password-card-title {
            font-size: 2.2em; /* Smaller title on very small screens */
        }
        .form-control-retro {
            font-size: 1em; /* Smaller input text */
            padding: 0.8em 1em;
        }
        .btn-retro-primary {
            font-size: 1.1em; /* Smaller button text */
            padding: 0.8em 1.5em;
        }
        .back-link-section p, .back-link-section a {
            font-size: 0.85em; /* Smaller text for back link section */
        }
    }
</style>

<div class="change-password-container">
    <div class="change-password-card">
        <div class="change-password-content">
            <h1 class="change-password-card-title">CHANGE PASSWORD</h1>
            <form action="/profile/change-password" method="POST" class="needs-validation" novalidate>
                <div class="mb-3">
                    <label class="form-label-retro" for="currentPassword">CURRENT PASSWORD</label>
                    <input class="form-control-retro" type="password" id="currentPassword" name="currentPassword" required>
                    <div class="invalid-feedback-retro">
                        PLEASE ENTER YOUR CURRENT PASSWORD.
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label-retro" for="newPassword">NEW PASSWORD</label>
                    <input class="form-control-retro" type="password" id="newPassword" name="newPassword" required>
                    <div class="invalid-feedback-retro">
                        PLEASE ENTER A NEW PASSWORD (MIN 6 CHARACTERS).
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label-retro" for="newPassword2">CONFIRM NEW PASSWORD</label>
                    <input class="form-control-retro" type="password" id="newPassword2" name="newPassword2" required>
                    <div class="invalid-feedback-retro" id="passwordMismatchFeedback">
                        NEW PASSWORDS DO NOT MATCH.
                    </div>
                </div>

                <button class="btn-retro-primary" type="submit">UPDATE PASSWORD</button>
            </form>

            <div class="back-link-section">
                <p>WANT TO EDIT YOUR AURA DETAILS?</p>
                <a href="/profile/edit">EDIT AURA HERE</a>
                <p class="mt-3">GO BACK TO YOUR AURA?</p>
                <a href="/aura">VIEW AURA</a>
            </div>
        </div>
    </div>
</div>

<script>
    // Client-side validation for the form
    (function () {
        'use strict';

        var forms = document.querySelectorAll('.needs-validation');
        const newPasswordInput = document.getElementById('newPassword');
        const newPassword2Input = document.getElementById('newPassword2');
        const passwordMismatchFeedback = document.getElementById('passwordMismatchFeedback');

        // Function to check password match
        const checkPasswordMatch = () => {
            if (newPasswordInput.value !== newPassword2Input.value) {
                newPassword2Input.setCustomValidity('New passwords do not match.');
                passwordMismatchFeedback.classList.add('password-mismatch'); // Add class to show specific message
            } else {
                newPassword2Input.setCustomValidity('');
                passwordMismatchFeedback.classList.remove('password-mismatch'); // Hide specific message
            }
        };

        // Listen for input on both new password fields
        newPasswordInput.addEventListener('input', checkPasswordMatch);
        newPassword2Input.addEventListener('input', checkPasswordMatch);

        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    checkPasswordMatch(); // Check again on submit

                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
    })();
</script>
